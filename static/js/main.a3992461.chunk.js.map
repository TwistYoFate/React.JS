{"version":3,"sources":["components/registerUser.js","components/displayUsers.js","components/navbar.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["RegisterUser","state","username","phone","handleChange","e","_this","setState","Object","defineProperty","target","id","value","handleSubmit","preventDefault","console","log","props","addNewUser","react_default","a","createElement","className","onSubmit","this","type","placeholder","onChange","Component","DisplayUsers","_ref","users","deleteUser","userlist","map","user","key","onClick","withRouter","react_router_dom","to","style","color","textDecoration","Home","newUsers","concat","toConsumableArray","newlist","filter","_this2","components_navbar","react_router","exact","path","render","components_registerUser","assign","components_displayUsers","App","components_Home","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3992461.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../css/registerUser.css';\r\n\r\nclass RegisterUser extends Component {\r\n    state={\r\n        username:'',\r\n        phone:''\r\n    }\r\n\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.id]:e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        this.props.addNewUser(this.state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"registerUser\">\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input type=\"text\" id=\"username\" placeholder=\"Name\" onChange={this.handleChange} />\r\n                <input type=\"text\" id=\"phone\" placeholder=\"Contact\" onChange={this.handleChange} />\r\n                <input type=\"submit\" id=\"add\" value='Add' />\r\n            </form>\r\n            <div className=\"output\">\r\n                <div>\r\n                    <span className=\"uh\">The details to be added are :</span>                \r\n                </div>\r\n                <br />\r\n                <div>\r\n                    <span className=\"uh\">Username: &nbsp;</span>                \r\n                    <span className=\"ue\">{this.state.username}</span>\r\n                </div>\r\n                <div>\r\n                    <span className=\"uh\">Contact: &nbsp;</span>                \r\n                    <span className=\"ue\">{this.state.phone}</span>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegisterUser;\r\n","import React from 'react'\r\nimport '../css/displayUsers.css'\r\n\r\n const DisplayUsers=({users, deleteUser})=>{\r\n        let userlist=users && users.map(user=>{\r\n            return(<table key={user.phone}>\r\n                <tr>\r\n                       <td id=\"un\">{user.username}&nbsp;</td>\r\n                       <td id='up'>{user.phone}</td>\r\n                       <td><button onClick={()=>{deleteUser(user.phone)}}>Delete</button></td>\r\n                </tr>\r\n            </table>)\r\n        })\r\n        return(\r\n\r\n            <div className=\"display\">\r\n                <table>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Contact</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </table>\r\n            {userlist}\r\n            </div>\r\n        )\r\n            \r\n}\r\n\r\nexport default DisplayUsers;","import React from 'react'\r\nimport {NavLink, withRouter} from 'react-router-dom'\r\nimport '../css/navbar.css';\r\n\r\nconst Navbar=()=>{\r\n    return(\r\n        <div className=\"nav\">\r\n            <div><NavLink to=\"/\" style={{color:\"black\",textDecoration:\"none\"}} className=\"active\">Register User</NavLink></div>\r\n            <div><NavLink to=\"/displayUsers\" style={{color:\"black\",textDecoration:\"none\"}} >Display Entries</NavLink></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Navbar)","import React, { Component } from 'react'\r\nimport RegisterUser from './registerUser';\r\nimport DisplayUsers from './displayUsers';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\r\nimport Navbar from './navbar';\r\n\r\nclass Home extends Component {\r\n    state={\r\n        users:[]\r\n    }\r\n\r\n    addNewUser=(user)=>{\r\n        let newUsers=[...this.state.users,user]\r\n        this.setState({\r\n            users:newUsers\r\n        })\r\n    }\r\n\r\n    deleteUser=(phone)=>{\r\n        let newlist=this.state.users.filter(user=>{\r\n            return (user.phone!==phone)\r\n        });\r\n        this.setState({\r\n            users:newlist\r\n        });\r\n    }\r\n\r\n  render() {\r\n    return (\r\n        <BrowserRouter>\r\n        <div>\r\n            <Navbar />\r\n        <Switch>\r\n            <Route exact path=\"/\" render={(props)=><RegisterUser {...props}  addNewUser={this.addNewUser} />} />\r\n            <Route path=\"/displayUsers\" render={(props)=><DisplayUsers {...props}  users={this.state.users} deleteUser={this.deleteUser} />} />\r\n        </Switch>\r\n        </div>\r\n        </BrowserRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport Home from './components/Home';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}